/*
r13t API

r13t external API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package r13tExtApi

import (
	"encoding/json"
)

// TLSSecretData struct for TLSSecretData
type TLSSecretData struct {
	TlsCrt *string `json:"tls.crt,omitempty"`
	TlsKey *string `json:"tls.key,omitempty"`
}

// NewTLSSecretData instantiates a new TLSSecretData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLSSecretData() *TLSSecretData {
	this := TLSSecretData{}
	return &this
}

// NewTLSSecretDataWithDefaults instantiates a new TLSSecretData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSSecretDataWithDefaults() *TLSSecretData {
	this := TLSSecretData{}
	return &this
}

// GetTlsCrt returns the TlsCrt field value if set, zero value otherwise.
func (o *TLSSecretData) GetTlsCrt() string {
	if o == nil || o.TlsCrt == nil {
		var ret string
		return ret
	}
	return *o.TlsCrt
}

// GetTlsCrtOk returns a tuple with the TlsCrt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecretData) GetTlsCrtOk() (*string, bool) {
	if o == nil || o.TlsCrt == nil {
		return nil, false
	}
	return o.TlsCrt, true
}

// HasTlsCrt returns a boolean if a field has been set.
func (o *TLSSecretData) HasTlsCrt() bool {
	if o != nil && o.TlsCrt != nil {
		return true
	}

	return false
}

// SetTlsCrt gets a reference to the given string and assigns it to the TlsCrt field.
func (o *TLSSecretData) SetTlsCrt(v string) {
	o.TlsCrt = &v
}

// GetTlsKey returns the TlsKey field value if set, zero value otherwise.
func (o *TLSSecretData) GetTlsKey() string {
	if o == nil || o.TlsKey == nil {
		var ret string
		return ret
	}
	return *o.TlsKey
}

// GetTlsKeyOk returns a tuple with the TlsKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecretData) GetTlsKeyOk() (*string, bool) {
	if o == nil || o.TlsKey == nil {
		return nil, false
	}
	return o.TlsKey, true
}

// HasTlsKey returns a boolean if a field has been set.
func (o *TLSSecretData) HasTlsKey() bool {
	if o != nil && o.TlsKey != nil {
		return true
	}

	return false
}

// SetTlsKey gets a reference to the given string and assigns it to the TlsKey field.
func (o *TLSSecretData) SetTlsKey(v string) {
	o.TlsKey = &v
}

func (o TLSSecretData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TlsCrt != nil {
		toSerialize["tls.crt"] = o.TlsCrt
	}
	if o.TlsKey != nil {
		toSerialize["tls.key"] = o.TlsKey
	}
	return json.Marshal(toSerialize)
}

type NullableTLSSecretData struct {
	value *TLSSecretData
	isSet bool
}

func (v NullableTLSSecretData) Get() *TLSSecretData {
	return v.value
}

func (v *NullableTLSSecretData) Set(val *TLSSecretData) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSSecretData) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSSecretData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSSecretData(val *TLSSecretData) *NullableTLSSecretData {
	return &NullableTLSSecretData{value: val, isSet: true}
}

func (v NullableTLSSecretData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSSecretData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


