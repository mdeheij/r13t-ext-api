/*
r13t API

r13t external API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package r13tExtApi

import (
	"encoding/json"
)

// TLSSecret struct for TLSSecret
type TLSSecret struct {
	ApiVersion *string `json:"apiVersion,omitempty"`
	Data *TLSSecretData `json:"data,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Metadata *TLSSecretMetadata `json:"metadata,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewTLSSecret instantiates a new TLSSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLSSecret() *TLSSecret {
	this := TLSSecret{}
	return &this
}

// NewTLSSecretWithDefaults instantiates a new TLSSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSSecretWithDefaults() *TLSSecret {
	this := TLSSecret{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *TLSSecret) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecret) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *TLSSecret) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *TLSSecret) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TLSSecret) GetData() TLSSecretData {
	if o == nil || o.Data == nil {
		var ret TLSSecretData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecret) GetDataOk() (*TLSSecretData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TLSSecret) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given TLSSecretData and assigns it to the Data field.
func (o *TLSSecret) SetData(v TLSSecretData) {
	o.Data = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *TLSSecret) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecret) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *TLSSecret) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *TLSSecret) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TLSSecret) GetMetadata() TLSSecretMetadata {
	if o == nil || o.Metadata == nil {
		var ret TLSSecretMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecret) GetMetadataOk() (*TLSSecretMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TLSSecret) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given TLSSecretMetadata and assigns it to the Metadata field.
func (o *TLSSecret) SetMetadata(v TLSSecretMetadata) {
	o.Metadata = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TLSSecret) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSSecret) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TLSSecret) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TLSSecret) SetType(v string) {
	o.Type = &v
}

func (o TLSSecret) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTLSSecret struct {
	value *TLSSecret
	isSet bool
}

func (v NullableTLSSecret) Get() *TLSSecret {
	return v.value
}

func (v *NullableTLSSecret) Set(val *TLSSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSSecret(val *TLSSecret) *NullableTLSSecret {
	return &NullableTLSSecret{value: val, isSet: true}
}

func (v NullableTLSSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


