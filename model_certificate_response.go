/*
r13t API

r13t external API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CertificateResponse struct for CertificateResponse
type CertificateResponse struct {
	Data *CertificateData `json:"data,omitempty"`
}

// NewCertificateResponse instantiates a new CertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateResponse() *CertificateResponse {
	this := CertificateResponse{}
	return &this
}

// NewCertificateResponseWithDefaults instantiates a new CertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateResponseWithDefaults() *CertificateResponse {
	this := CertificateResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CertificateResponse) GetData() CertificateData {
	if o == nil || o.Data == nil {
		var ret CertificateData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateResponse) GetDataOk() (*CertificateData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CertificateResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given CertificateData and assigns it to the Data field.
func (o *CertificateResponse) SetData(v CertificateData) {
	o.Data = &v
}

func (o CertificateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateResponse struct {
	value *CertificateResponse
	isSet bool
}

func (v NullableCertificateResponse) Get() *CertificateResponse {
	return v.value
}

func (v *NullableCertificateResponse) Set(val *CertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateResponse(val *CertificateResponse) *NullableCertificateResponse {
	return &NullableCertificateResponse{value: val, isSet: true}
}

func (v NullableCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


